/* Generated By:JJTree&JavaCC: Do not edit this line. FreshMeat.java */
package parser;
import view.Tela;
import controleDeArquivos.CreateFile;
import recovery.*;
import java.io.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;

public class FreshMeat/*@bgen(jjtree)*/implements FreshMeatTreeConstants, FreshMeatConstants {/*@bgen(jjtree)*/
  protected static JJTFreshMeatState jjtree = new JJTFreshMeatState();final static Tela window = new Tela();
        static private String console = "";

        //private static String myFile = "";
    int contParseError = 0; // contador de erros sintáticos

        public static void main(String args []) throws ParseException
        {
            window.setVisible(true);

                window.getCompilar().addActionListener(new ActionListener()
                {
                public void actionPerformed(ActionEvent e)
                {
                                window.setVazioConsoleMsg();

                    if((window.getTextArquivo().getText().equals(window.getCampoTexto())) != true)
                                {
                                        window.setControleArquivo(false);
                                }

                                if(window.getControleArquivo() || window.getTextArquivo().getText().equals(" ") )
                                {
                            try
                            {
                                                RunAskella();
                                        }
                                        catch (ParseException e1)
                                        {
                                                e1.printStackTrace();
                                        }
                    }
                    else
                    {
                                if(window.getTextArquivo().getText().equals(""))
                                {
                                JOptionPane.showMessageDialog (null, "Arquivo vazio", "Arquivo", JOptionPane.WARNING_MESSAGE);
                                }
                                else
                                {
                                        int resp = JOptionPane.showConfirmDialog(null, "Salvar altera\u00e7\u00f5es?");

                                        if(resp == 0)
                                        {
                                            //Salvar um novo arquivo se ele n existir
                                            if(window.getFile() == null)
                                        {
                                                window.salvarComo();
                                        try
                                        {
                                                                        RunAskella();
                                                                }
                                                                catch (ParseException e1)
                                                                {
                                                                        e1.printStackTrace();
                                                                }

                                                }
                                        else //Se o arquivo ja existir salvar nele
                                        {
                                                window.salvar();
                                    try
                                    {
                                                                        RunAskella();
                                                                }
                                                                catch (ParseException e1)
                                                                {
                                                                        e1.printStackTrace();
                                                                }
                                        }
                                        }
                                }
                    }
                }
                });
        }

        public static void RunAskella() throws ParseException
    {
        FileReader arql = null;

        try
        {
                        arql = new FileReader(window.getFile());
                }
                catch (FileNotFoundException e2)
                {
                        e2.printStackTrace();
                }
                        BufferedReader arq = new BufferedReader(arql);
            try
            {
                FreshMeat parser = new FreshMeat(arq);
            }
            catch (Exception e1)
            {
                FreshMeat.ReInit(arq);
            }
            catch (Error e1)
                {
                        FreshMeat.ReInit(arq);
                }

        try
        {
            SimpleNode simpleNode = FreshMeat.start();
            simpleNode.dump("");

                        //window.setConsole(console);
            lnlog(simpleNode.getMsg());
        }
        catch (ParseException e)
        {
            lnlog("Exception: A express\u00e3o inserida n\u00e3o est\u00e1 correta, verifique por favor com as instru\u00e7\u00f5es abaixo e tente novamente.");
            lnlog(e.getMessage());
            //lnlog(e);
            //parser.contParseError = 1;   // não existe recuperação de erros
            //System.exit(0);			  	
        }
        catch (Error e)
        {
            lnlog("Error: A entrada inserida n\u00e3o \u00e9 um token v\u00e1lido ou o arquivo est\u00e1 vazio, revise por favor e tente novamente");
                //System.out.println("error");
            lnlog(e.getMessage());
        }
//     	finally
//    	{
//      	lnlog(token_source.foundLexError() + " Lexical Errors found");
//        	lnlog(contParseError + " Syntactic Errors found");
//     	}  
        }

        static private void log(String s)
        {
                console = s;
                window.setConsole(console);
        }

        static private void lnlog(String s)
        {
                log(s + "\u005cn");
        }

    static public String im(int x)
    {
                int k;
                String s;
                s = tokenImage[x];
                k = s.lastIndexOf("\u005c"");
                try
                {
              s = s.substring(1,k);
                }
        catch (StringIndexOutOfBoundsException e)
        {
        }
        return s;
        }

        static Token lastError = null;
        static boolean eof;    // variável que indica se EOF foi alcançado

        // o método abaixo consome tokens até alcançar um que pertença ao conjunto
        // de sincronização
        static void consumeUntil(RecoverySet g,
                                 ParseException e,
                                 String met) throws ParseEOFException,
                                                    ParseException
        {
                Token tok;
        //lnlog();

        lnlog("*** " + met + " ***");
        lnlog("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

        if (g == null) throw e; // se o conjunto é null, propaga a exceção

        tok = getToken(1); // pega token corrente

        while ( ! eof )
        { // se não chegou ao fim do arquivo
                if ( g.contains(tok.kind))
                {       //achou um token no conjunto
                    lnlog("     Encontrado token de sincroniza\u00e7\u00e3o: " +
                                       im(tok.kind));
                break;
                }
                lnlog("     Ignorando o token: " + im(tok.kind));
                getNextToken();     // pega próximo token       
                tok = getToken(1);
                if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
                      eof = true;
        }
        if ( tok != lastError)
        {
                lnlog(e.getMessage());
                lastError = tok;
        }
                if ( eof )
                        throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

  static final public SimpleNode start() throws ParseException {
                     /*@bgen(jjtree) start */
                      SimpleNode jjtn000 = new SimpleNode(JJTSTART);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.start;
    try {
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case USING:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          UsingDeclaration();
        }
        StartScript();
        DoublePoints();
        Id();
        LBrace();
        label_2:
        while (true) {
          Block();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGERTYPE:
          case STRINGTYPE:
          case BOOLTYPE:
          case IF:
          case FOR:
          case WHILE:
          case ID:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
        }
        RBrace();
        jj_consume_token(0);
                  {if (true) return jjtn000;}
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "start");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Block() throws ParseException {
               /*@bgen(jjtree) Block */
                SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.Block;
    try {
      try {
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGERTYPE:
          case STRINGTYPE:
          case BOOLTYPE:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
          VariableDeclaration();
        }
        Command();
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "Block");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Command() throws ParseException {
                 /*@bgen(jjtree) Command */
                  SimpleNode jjtn000 = new SimpleNode(JJTCOMMAND);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.Command;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          VariableAssignment();
          break;
        case IF:
          If();
          break;
        case FOR:
          ForTo();
          break;
        case WHILE:
          While();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "Command");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VariableAssignment() throws ParseException {
                            /*@bgen(jjtree) VariableAssignment */
                             SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEASSIGNMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.VariableAssignment;
    try {
      try {
        Id();
        VariableInit();
        SemiColon();
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "VariableInit");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VariableInit() throws ParseException {
                      /*@bgen(jjtree) VariableInit */
                       SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEINIT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.VariableInit;
    try {
      try {
        Assign();
        Y();
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "VariableInit");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Y() throws ParseException {
           /*@bgen(jjtree) Y */
            SimpleNode jjtn000 = new SimpleNode(JJTY);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.Y;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case NUMBER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
            Number();
            break;
          case ID:
            Id();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SUM:
            case MINUS:
            case PLUS:
            case DIVIDE:
              ;
              break;
            default:
              jj_la1[5] = jj_gen;
              break label_4;
            }
            DoMath();
          }
          break;
        case VARCHARDELIMITER:
          W();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "Y");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void W() throws ParseException {
           /*@bgen(jjtree) W */
            SimpleNode jjtn000 = new SimpleNode(JJTW);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.W;
    try {
      try {
        StringDelimit();
        Id();
        StringDelimit();
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "W");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DoMath() throws ParseException {
                /*@bgen(jjtree) DoMath */
                 SimpleNode jjtn000 = new SimpleNode(JJTDOMATH);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.DoMath;
    try {
      try {
        MathOperator();
        ExpressionArguments();
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "DoMath");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void If() throws ParseException {
            /*@bgen(jjtree) If */
             SimpleNode jjtn000 = new SimpleNode(JJTIF);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.If;
    try {
      try {
        IF();
        LogicExpression();
        Then();
        LBrace();
        Command();
        RBrace();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          Else();
          LBrace();
          Command();
          RBrace();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "If");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ForTo() throws ParseException {
               /*@bgen(jjtree) ForTo */
                SimpleNode jjtn000 = new SimpleNode(JJTFORTO);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.ForTo;
    try {
      try {
        FOR();
        VariableAssignment();
        To();
        ExpressionArguments();
        LBrace();
        Command();
        RBrace();
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "ForTo");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void While() throws ParseException {
               /*@bgen(jjtree) While */
                SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.While;
    try {
      try {
        WHILE();
        LogicExpression();
        LBrace();
        Command();
        RBrace();
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "While");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LogicExpression() throws ParseException {
                         /*@bgen(jjtree) LogicExpression */
                          SimpleNode jjtn000 = new SimpleNode(JJTLOGICEXPRESSION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.LogicExpression;
    try {
      try {
        ExpressionArguments();
        label_5:
        while (true) {
          LogicOperator();
          ExpressionArguments();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GREATER:
          case LESS:
          case GREATEREQUAL:
          case LESSEQUAL:
          case DIFFERENCE:
          case EQUAL:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_5;
          }
        }
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "LogicExpression");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ExpressionArguments() throws ParseException {
                             /*@bgen(jjtree) ExpressionArguments */
                              SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONARGUMENTS);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.ExpressionArguments;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          Id();
          break;
        case NUMBER:
          Number();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "ExpressionArguments");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MathOperator() throws ParseException {
                      /*@bgen(jjtree) MathOperator */
                       SimpleNode jjtn000 = new SimpleNode(JJTMATHOPERATOR);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.MathOperator;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUM:
          Sum();
          break;
        case MINUS:
          Minus();
          break;
        case PLUS:
          Plus();
          break;
        case DIVIDE:
          Divide();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "MathOperator");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LogicOperator() throws ParseException {
                       /*@bgen(jjtree) LogicOperator */
                        SimpleNode jjtn000 = new SimpleNode(JJTLOGICOPERATOR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.LogicOperator;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GREATER:
          Greater();
          break;
        case LESS:
          Less();
          break;
        case GREATEREQUAL:
          GreaterEqual();
          break;
        case LESSEQUAL:
          LessEqual();
          break;
        case DIFFERENCE:
          Difference();
          break;
        case EQUAL:
          Equal();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "LogicOperator");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void UsingDeclaration() throws ParseException {
                          /*@bgen(jjtree) UsingDeclaration */
                           SimpleNode jjtn000 = new SimpleNode(JJTUSINGDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.UsingDeclaration;
    try {
      try {
        Using();
        Id();
        SemiColon();
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "UsingDeclaration");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VariableDeclaration() throws ParseException {
                             /*@bgen(jjtree) VariableDeclaration */
                              SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.VariableDeclaration;
    try {
      try {
        DataType();
        label_6:
        while (true) {
          IDList();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
          case ID:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
        }
        SemiColon();
      } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "VariableDeclaration");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DataType() throws ParseException {
                  /*@bgen(jjtree) DataType */
                   SimpleNode jjtn000 = new SimpleNode(JJTDATATYPE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.DataType;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGERTYPE:
          IntegerType();
          break;
        case STRINGTYPE:
          StringType();
          break;
        case BOOLTYPE:
          BoolType();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                try
                {
                consumeUntil(recoverySet, e, "DataType");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IDList() throws ParseException {
                /*@bgen(jjtree) IDList */
                 SimpleNode jjtn000 = new SimpleNode(JJTIDLIST);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.IDList;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          Id();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGN:
            VariableInit();
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          break;
        case COMMA:
          Comma();
          Id();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGN:
            VariableInit();
            break;
          default:
            jj_la1[15] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                try
                {
                consumeUntil(recoverySet, e, "IDList");
                }
                catch(ParseEOFException eof)
                {

                }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StartScript() throws ParseException {
                     /*@bgen(jjtree) StartScript */
  SimpleNode jjtn000 = new SimpleNode(JJTSTARTSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STARTSCRIPT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DoublePoints() throws ParseException {
                      /*@bgen(jjtree) DoublePoints */
  SimpleNode jjtn000 = new SimpleNode(JJTDOUBLEPOINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOUBLEPOINTS);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Id() throws ParseException {
            /*@bgen(jjtree) Id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LBrace() throws ParseException {
                /*@bgen(jjtree) LBrace */
  SimpleNode jjtn000 = new SimpleNode(JJTLBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RBrace() throws ParseException {
                /*@bgen(jjtree) RBrace */
  SimpleNode jjtn000 = new SimpleNode(JJTRBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RBRACE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SemiColon() throws ParseException {
                   /*@bgen(jjtree) SemiColon */
  SimpleNode jjtn000 = new SimpleNode(JJTSEMICOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SEMICOLON);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Assign() throws ParseException {
                /*@bgen(jjtree) Assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Number() throws ParseException {
                /*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NUMBER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StringDelimit() throws ParseException {
                       /*@bgen(jjtree) StringDelimit */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRINGDELIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VARCHARDELIMITER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IF() throws ParseException {
            /*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Then() throws ParseException {
              /*@bgen(jjtree) Then */
  SimpleNode jjtn000 = new SimpleNode(JJTTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THEN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Else() throws ParseException {
              /*@bgen(jjtree) Else */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FOR() throws ParseException {
             /*@bgen(jjtree) FOR */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void To() throws ParseException {
            /*@bgen(jjtree) To */
  SimpleNode jjtn000 = new SimpleNode(JJTTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TO);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void WHILE() throws ParseException {
               /*@bgen(jjtree) WHILE */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Sum() throws ParseException {
             /*@bgen(jjtree) Sum */
  SimpleNode jjtn000 = new SimpleNode(JJTSUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUM);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Minus() throws ParseException {
               /*@bgen(jjtree) Minus */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MINUS);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Plus() throws ParseException {
              /*@bgen(jjtree) Plus */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLUS);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Divide() throws ParseException {
                /*@bgen(jjtree) Divide */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIVIDE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Greater() throws ParseException {
                 /*@bgen(jjtree) Greater */
  SimpleNode jjtn000 = new SimpleNode(JJTGREATER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GREATER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Less() throws ParseException {
              /*@bgen(jjtree) Less */
  SimpleNode jjtn000 = new SimpleNode(JJTLESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LESS);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void GreaterEqual() throws ParseException {
                      /*@bgen(jjtree) GreaterEqual */
  SimpleNode jjtn000 = new SimpleNode(JJTGREATEREQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GREATEREQUAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LessEqual() throws ParseException {
                   /*@bgen(jjtree) LessEqual */
  SimpleNode jjtn000 = new SimpleNode(JJTLESSEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LESSEQUAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Difference() throws ParseException {
                    /*@bgen(jjtree) Difference */
  SimpleNode jjtn000 = new SimpleNode(JJTDIFFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIFFERENCE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Equal() throws ParseException {
               /*@bgen(jjtree) Equal */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQUAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Using() throws ParseException {
               /*@bgen(jjtree) Using */
  SimpleNode jjtn000 = new SimpleNode(JJTUSING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(USING);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IntegerType() throws ParseException {
                     /*@bgen(jjtree) IntegerType */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGERTYPE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StringType() throws ParseException {
                    /*@bgen(jjtree) StringType */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRINGTYPE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BoolType() throws ParseException {
                  /*@bgen(jjtree) BoolType */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOLTYPE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Comma() throws ParseException {
               /*@bgen(jjtree) Comma */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMMA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FreshMeatTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0xa5c0,0x1c0,0xa400,0x0,0xf0000,0x20000000,0x1000,0x7e00000,0x0,0xf0000,0x7e00000,0x80000000,0x1c0,0x100000,0x100000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x10,0x0,0x10,0x50,0x0,0x50,0x0,0x0,0x50,0x0,0x0,0x10,0x0,0x0,0x0,0x10,};
   }

  /** Constructor with InputStream. */
  public FreshMeat(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FreshMeat(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FreshMeatTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FreshMeat(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FreshMeatTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FreshMeat(FreshMeatTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FreshMeatTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
