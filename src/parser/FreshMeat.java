/* Generated By:JJTree&JavaCC: Do not edit this line. FreshMeat.java */
package parser;
import recovery.*;
import view.Tela;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;

import javax.swing.JOptionPane;

public class FreshMeat/*@bgen(jjtree)*/implements FreshMeatTreeConstants, FreshMeatConstants {/*@bgen(jjtree)*/
  protected static JJTFreshMeatState jjtree = new JJTFreshMeatState();
  final static Tela window = new Tela();
  static private String console = "";
  
  	//private static String myFile = "";
        int contParseError = 0; // contador de erros sintáticos

        // funo para abertura de arquivo a ser usado como source para leitura de tokens
        public static java.io.BufferedReader abreArquivo (String file)
        {
                java.io.BufferedReader in;
                java.io.File arquivinho = new java.io.File(file);
        try
        {
                in= new java.io.BufferedReader(new java.io.FileReader(arquivinho));
        }
        catch(java.io.IOException e)
        {
                in = null;
                lnlog("Arquivo n\u00e3o pode ser aberto.");
        }
                return (in);
        }

        
        public static java.io.BufferedReader abreArquivo (File file)
        {
	            java.io.BufferedReader in;
	            java.io.File arquivinho = file;
	    try
	    {
	            in= new java.io.BufferedReader(new java.io.FileReader(arquivinho));
	    }
	    catch(java.io.IOException e)
	    {
	            in = null;
	            lnlog("Arquivo n\u00e3o pode ser aberto.");
	    }
	            return (in);
	    }
        public static void inicia() throws ParseException
        {
        FreshMeat parser;     // analisador léxico/sintático
        

                // Receba o arquivo aberto, leia uma linha 
                try
                {
                        //Verifica se ja nao ha arquivo escolhido
                        /*if (myFile.equals(""))
                        {
                                //Cria o Seletor de arquivos e seta o disco "C:" como default
                                javax.swing.JFileChooser arquivo = new javax.swing.JFileChooser();

                                //Habilita para escolha  
                    arquivo.showOpenDialog(null);

                                //Recebe o Path do arquivo
                    myFile = arquivo.getSelectedFile().getAbsolutePath();*/

                                //Abre o arquivo no endereco escolhido
                        java.io.BufferedReader aux = abreArquivo(window.getFile());
                    String str;
                    java.io.StringReader sr = new java.io.StringReader( aux.readLine());
                        java.io.Reader r = new java.io.BufferedReader( sr );
                        parser = new FreshMeat( abreArquivo(window.getFile()));
                        java.io.BufferedReader in = aux;

                    // enquanto houverem linhas, as leio;
                    while ((str = in.readLine()) != null)
                    {
                        sr = new java.io.StringReader( str);
                                r = new java.io.BufferedReader( sr );
                    }
                //Encerra o buffer  
                in.close();
                        //}
        }
        catch (java.io.IOException e)
        {
                        javax.swing.JOptionPane.showMessageDialog(null,"Erro ao iniciar o Analisador Lexico!");
        }

        try
        {
                SimpleNode simpleNode = FreshMeat.start();
                simpleNode.dump("");
                window.setConsole(console);
                //lnlog(simpleNode.getMsg());
        }
        catch (ParseException e)
        {
                lnlog("Exception: A express\u00e3o inserida n\u00e3o est\u00e1 correta, verifique por favor com as instru\u00e7\u00f5es abaixo e tente novamente.");
                lnlog(e.getMessage());
                //lnlog(e);
                        //parser.contParseError = 1;   // não existe recuperação de erros
                        //System.exit(0);			  	
        }
        catch (Error e)
        {
                lnlog("Error: A entrada inserida n\u00e3o \u00e9 um token v\u00e1lido, revise por favor e tente novamente");
                lnlog(e.getMessage());
        }
//     	finally
//    	{
//      	lnlog(token_source.foundLexError() + " Lexical Errors found");
//        	lnlog(contParseError + " Syntactic Errors found");
//     	}  
        }
  
	  public static void main(String args []) throws ParseException
	  {
	        //Inicia a tela
	    window.setVisible(true);
	
	                window.getCompilar().addActionListener(new ActionListener() {
	                        public void actionPerformed(ActionEvent e) {
	
	                                window.setVazioConsoleMsg();
	
	                                if((window.getTextArquivo().getText().equals(window.getCampoTexto())) != true)
	                {
	                  window.setControleArquivo(false);
	                }
	
	
	                if(window.getControleArquivo() || window.getTextArquivo().getText().equals(" ") )
	                {
	                                        try {
												inicia();
											} catch (ParseException e1) {
												// TODO Auto-generated catch block
												e1.printStackTrace();
											}
	                                }else
	                                {
	                                        if(window.getTextArquivo().getText().equals(""))
	                        {
	                            JOptionPane.showMessageDialog (null, "Arquivo vazio", "Arquivo", JOptionPane.WARNING_MESSAGE);
	                        }else{
	                          int resp = JOptionPane.showConfirmDialog(null, "Salvar altera\u00e7\u00f5es?");
	
	                          if(resp == 0)
	                          {
	                            //Salvar um novo arquivo se ele n existir
	                            if(window.getFile() == null)
	                            {
	                                window.salvarComo();
	                                                        try {
																inicia();
															} catch (ParseException e1) {
																// TODO Auto-generated catch block
																e1.printStackTrace();
															}
	
	                            }else //Se o arquivo ja existir salvar nele
	                            {
	                                window.salvar();
	                                                        try {
																inicia();
															} catch (ParseException e1) {
																// TODO Auto-generated catch block
																e1.printStackTrace();
															}
	                            }
	                          }
	                        }
	                                }
	                        }
	                });
	  }
	  
	  static private void log(String s) {
		  console = console+ s;
	  }
	  static private void lnlog(String s){
		  log(s+"\n");
	  }
	
	        static public String im(int x)
	        {
	        int k;
	                String s;
	            s = tokenImage[x];
	            k = s.lastIndexOf("\u005c"");
	        try
	        {
	              s = s.substring(1,k);
	        }
	                catch (StringIndexOutOfBoundsException e)
	                {
	                }
	                return s;
	          }
	
	          static Token lastError = null;
	          static boolean eof;    // variável que indica se EOF foi alcançado
	
	          // o método abaixo consome tokens até alcançar um que pertença ao conjunto
	          // de sincronização
	          static void consumeUntil(RecoverySet g,
	                                 ParseException e,
	                                 String met) throws ParseEOFException,
	                                                    ParseException
	          {
	                Token tok;
	                //lnlog();
	                lnlog("*** " + met + " ***");
	                lnlog("     Conjunto de sincroniza\u00e7\u00e3o: " + g);
	
	                if (g == null) throw e; // se o conjunto é null, propaga a exceção
	
	                tok = getToken(1); // pega token corrente
	                while ( ! eof ) { // se não chegou ao fim do arquivo
	                  if ( g.contains(tok.kind)) {//achou um token no conjunto
	                    lnlog("     Encontrado token de sincroniza\u00e7\u00e3o: " +
	                                       im(tok.kind));
	                    break;
	                  }
	                  lnlog("     Ignorando o token: " + im(tok.kind));
	                  getNextToken();     // pega próximo token       
	              tok = getToken(1);
	                  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	                      eof = true;
	                }
	            if ( tok != lastError)  {
	                  lnlog(e.getMessage());
	                  lastError = tok;
	
	                }
	                if ( eof )
	                  throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
	          }
	
  static final public SimpleNode start() throws ParseException {
    trace_call("start");
    try {
                     /*@bgen(jjtree) start */
                      SimpleNode jjtn000 = new SimpleNode(JJTSTART);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.start;
      try {
        try {
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case USING:
              ;
              break;
            default:
              jj_la1[0] = jj_gen;
              break label_1;
            }
            UsingDeclaration();
          }
          jj_consume_token(STARTSCRIPT);
          jj_consume_token(DOUBLEPOINTS);
          jj_consume_token(ID);
          jj_consume_token(LBRACE);
          label_2:
          while (true) {
            Block();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGERTYPE:
            case STRINGTYPE:
            case BOOLTYPE:
            case IF:
            case FOR:
            case WHILE:
            case ID:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_2;
            }
          }
          jj_consume_token(RBRACE);
                  {if (true) return jjtn000;}
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "start");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("start");
    }
  }

  static final public void Block() throws ParseException {
    trace_call("Block");
    try {
               /*@bgen(jjtree) Block */
                SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.Block;
      try {
        try {
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGERTYPE:
            case STRINGTYPE:
            case BOOLTYPE:
              ;
              break;
            default:
              jj_la1[2] = jj_gen;
              break label_3;
            }
            VariableDeclaration();
          }
          Command();
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "Block");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Block");
    }
  }

  static final public void Command() throws ParseException {
    trace_call("Command");
    try {
                 /*@bgen(jjtree) Command */
                  SimpleNode jjtn000 = new SimpleNode(JJTCOMMAND);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.Command;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            VariableAssignment();
            break;
          case IF:
            If();
            break;
          case FOR:
            ForTo();
            break;
          case WHILE:
            While();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "Command");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Command");
    }
  }

  static final public void VariableAssignment() throws ParseException {
    trace_call("VariableAssignment");
    try {
                            /*@bgen(jjtree) VariableAssignment */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ID);
        VariableInit();
        jj_consume_token(SEMICOLON);
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("VariableAssignment");
    }
  }

  static final public void VariableInit() throws ParseException {
    trace_call("VariableInit");
    try {
                      /*@bgen(jjtree) VariableInit */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(ASSIGN);
        Y();
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("VariableInit");
    }
  }

  static final public void Y() throws ParseException {
    trace_call("Y");
    try {
           /*@bgen(jjtree) Y */
  SimpleNode jjtn000 = new SimpleNode(JJTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case NUMBER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
            jj_consume_token(NUMBER);
            break;
          case ID:
            jj_consume_token(ID);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SUM:
            case MINUS:
            case PLUS:
            case DIVIDE:
              ;
              break;
            default:
              jj_la1[5] = jj_gen;
              break label_4;
            }
            DoMath();
          }
          break;
        case VARCHARDELIMITER:
          W();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("Y");
    }
  }

  static final public void W() throws ParseException {
    trace_call("W");
    try {
           /*@bgen(jjtree) W */
  SimpleNode jjtn000 = new SimpleNode(JJTW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        jj_consume_token(VARCHARDELIMITER);
        jj_consume_token(ID);
        jj_consume_token(VARCHARDELIMITER);
      } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
      }
    } finally {
      trace_return("W");
    }
  }

  static final public void DoMath() throws ParseException {
    trace_call("DoMath");
    try {
                /*@bgen(jjtree) DoMath */
  SimpleNode jjtn000 = new SimpleNode(JJTDOMATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        MathOperator();
        ExpressionArguments();
      } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
      } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
      }
    } finally {
      trace_return("DoMath");
    }
  }

  static final public void If() throws ParseException {
    trace_call("If");
    try {
            /*@bgen(jjtree) If */
             SimpleNode jjtn000 = new SimpleNode(JJTIF);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.If;
      try {
        try {
          jj_consume_token(IF);
          LogicExpression();
          jj_consume_token(THEN);
          jj_consume_token(LBRACE);
          Command();
          jj_consume_token(RBRACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            jj_consume_token(ELSE);
            jj_consume_token(LBRACE);
            Command();
            jj_consume_token(RBRACE);
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "If");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("If");
    }
  }

  static final public void ForTo() throws ParseException {
    trace_call("ForTo");
    try {
               /*@bgen(jjtree) ForTo */
                SimpleNode jjtn000 = new SimpleNode(JJTFORTO);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.ForTo;
      try {
        try {
          jj_consume_token(FOR);
          VariableAssignment();
          jj_consume_token(TO);
          ExpressionArguments();
          jj_consume_token(LBRACE);
          Command();
          jj_consume_token(RBRACE);
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "ForTo");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ForTo");
    }
  }

  static final public void While() throws ParseException {
    trace_call("While");
    try {
               /*@bgen(jjtree) While */
                SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.While;
      try {
        try {
          jj_consume_token(WHILE);
          LogicExpression();
          jj_consume_token(LBRACE);
          Command();
          jj_consume_token(RBRACE);
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "While");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("While");
    }
  }

  static final public void LogicExpression() throws ParseException {
    trace_call("LogicExpression");
    try {
                         /*@bgen(jjtree) LogicExpression */
                          SimpleNode jjtn000 = new SimpleNode(JJTLOGICEXPRESSION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.LogicExpression;
      try {
        try {
          ExpressionArguments();
          label_5:
          while (true) {
            LogicOperator();
            ExpressionArguments();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case GREATER:
            case LESS:
            case GREATEREQUAL:
            case LESSEQUAL:
            case DIFFERENCE:
            case EQUAL:
              ;
              break;
            default:
              jj_la1[8] = jj_gen;
              break label_5;
            }
          }
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "LogicExpression");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("LogicExpression");
    }
  }

//void MathExpression() : { /*RecoverySet recoverySet = First.MathExpression; */}
//{
//	/*try
//  	{*/
//		ExpressionArguments() (MathOperator() ExpressionArguments())+
//	//}
//	/*
//	catch(ParseException e)
//	{
//  		try
//  		{		
//			consumeUntil(recoverySet, e, "MathExpression");  
//  		}
//  		catch(ParseEOFException eof)
//  		{
//    
//  		}  
//	}
//	*/
//	
//}
  static final public void ExpressionArguments() throws ParseException {
    trace_call("ExpressionArguments");
    try {
                             /*@bgen(jjtree) ExpressionArguments */
                              SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONARGUMENTS);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.ExpressionArguments;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            jj_consume_token(ID);
            break;
          case NUMBER:
            jj_consume_token(NUMBER);
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "ExpressionArguments");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("ExpressionArguments");
    }
  }

  static final public void MathOperator() throws ParseException {
    trace_call("MathOperator");
    try {
                      /*@bgen(jjtree) MathOperator */
                       SimpleNode jjtn000 = new SimpleNode(JJTMATHOPERATOR);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.MathOperator;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SUM:
            jj_consume_token(SUM);
            break;
          case MINUS:
            jj_consume_token(MINUS);
            break;
          case PLUS:
            jj_consume_token(PLUS);
            break;
          case DIVIDE:
            jj_consume_token(DIVIDE);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "MathOperator");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("MathOperator");
    }
  }

  static final public void LogicOperator() throws ParseException {
    trace_call("LogicOperator");
    try {
                       /*@bgen(jjtree) LogicOperator */
                        SimpleNode jjtn000 = new SimpleNode(JJTLOGICOPERATOR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.LogicOperator;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GREATER:
            jj_consume_token(GREATER);
            break;
          case LESS:
            jj_consume_token(LESS);
            break;
          case GREATEREQUAL:
            jj_consume_token(GREATEREQUAL);
            break;
          case LESSEQUAL:
            jj_consume_token(LESSEQUAL);
            break;
          case DIFFERENCE:
            jj_consume_token(DIFFERENCE);
            break;
          case EQUAL:
            jj_consume_token(EQUAL);
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "LogicOperator");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("LogicOperator");
    }
  }

  static final public void UsingDeclaration() throws ParseException {
    trace_call("UsingDeclaration");
    try {
                          /*@bgen(jjtree) UsingDeclaration */
                           SimpleNode jjtn000 = new SimpleNode(JJTUSINGDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.UsingDeclaration;
      try {
        try {
          jj_consume_token(USING);
          jj_consume_token(ID);
          jj_consume_token(SEMICOLON);
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "UsingDeclaration");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("UsingDeclaration");
    }
  }

  static final public void VariableDeclaration() throws ParseException {
    trace_call("VariableDeclaration");
    try {
                             /*@bgen(jjtree) VariableDeclaration */
                              SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.VariableDeclaration;
      try {
        try {
          DataType();
          label_6:
          while (true) {
            IDList();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
            case ID:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_6;
            }
          }
          jj_consume_token(SEMICOLON);
        } catch (ParseException e) {
                try
                {
                        consumeUntil(recoverySet, e, "VariableDeclaration");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("VariableDeclaration");
    }
  }

  static final public void DataType() throws ParseException {
    trace_call("DataType");
    try {
                  /*@bgen(jjtree) DataType */
                   SimpleNode jjtn000 = new SimpleNode(JJTDATATYPE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.DataType;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGERTYPE:
            jj_consume_token(INTEGERTYPE);
            break;
          case STRINGTYPE:
            jj_consume_token(STRINGTYPE);
            break;
          case BOOLTYPE:
            jj_consume_token(BOOLTYPE);
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
                try
                {
                consumeUntil(recoverySet, e, "DataType");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("DataType");
    }
  }

  static final public void IDList() throws ParseException {
    trace_call("IDList");
    try {
                /*@bgen(jjtree) IDList */
                 SimpleNode jjtn000 = new SimpleNode(JJTIDLIST);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);RecoverySet recoverySet = First.IDList;
      try {
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            jj_consume_token(ID);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ASSIGN:
              VariableInit();
              break;
            default:
              jj_la1[14] = jj_gen;
              ;
            }
            break;
          case COMMA:
            jj_consume_token(COMMA);
            jj_consume_token(ID);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ASSIGN:
              VariableInit();
              break;
            default:
              jj_la1[15] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
                try
                {
                consumeUntil(recoverySet, e, "IDList");
                }
                catch(ParseEOFException eof)
                {

                }
        }
      } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
      }
    } finally {
      trace_return("IDList");
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FreshMeatTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0xa5c0,0x1c0,0xa400,0x0,0xf0000,0x20000000,0x1000,0x7e00000,0x0,0xf0000,0x7e00000,0x80000000,0x1c0,0x100000,0x100000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x10,0x0,0x10,0x50,0x0,0x50,0x0,0x0,0x50,0x0,0x0,0x10,0x0,0x0,0x0,0x10,};
   }

  /** Constructor with InputStream. */
  public FreshMeat(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FreshMeat(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      lnlog("ERROR: Second call to constructor of static parser.  ");
      lnlog("       You must either use ReInit() or set the JavaCC option STATIC to false");
      lnlog("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FreshMeatTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FreshMeat(java.io.Reader stream) {
    if (jj_initialized_once) {
      lnlog("ERROR: Second call to constructor of static parser. ");
      lnlog("       You must either use ReInit() or set the JavaCC option STATIC to false");
      lnlog("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FreshMeatTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FreshMeat(FreshMeatTokenManager tm) {
    if (jj_initialized_once) {
      lnlog("ERROR: Second call to constructor of static parser. ");
      lnlog("       You must either use ReInit() or set the JavaCC option STATIC to false");
      lnlog("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FreshMeatTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { log(" "); }
      lnlog("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { log(" "); }
      lnlog("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { log(" "); }
      log("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        log(": \"" + t.image + "\"");
      }
      lnlog(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { log(" "); }
      log("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        log(": \"" + t1.image + "\"");
      }
      lnlog(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
