/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. FreshMeat.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  //DEBUG_PARSER = true;
}

PARSER_BEGIN(FreshMeat)
 
package parser;
import view.Tela;
import controleDeArquivos.CreateFile;
import recovery.*;
import java.io.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;

public class FreshMeat/*@bgen(jjtree)*/implements FreshMeatTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTFreshMeatState jjtree = new JJTFreshMeatState();

/*@egen*/
  	final static Tela window = new Tela();
  	static private String console = "";
  
  	//private static String myFile = "";
    int contParseError = 0; // contador de erros sint\u00e1ticos
	
  	public static void main(String args []) throws ParseException
  	{
	    window.setVisible(true);
	
		window.getCompilar().addActionListener(new ActionListener()
		{
    		public void actionPerformed(ActionEvent e)
    		{
				window.setVazioConsoleMsg();

	            if((window.getTextArquivo().getText().equals(window.getCampoTexto())) != true)
				{
	  				window.setControleArquivo(false);
				}
				
				if(window.getControleArquivo() || window.getTextArquivo().getText().equals(" ") )
				{
		            try
		            {
						RunAskella();
					}
					catch (ParseException e1)
					{
						e1.printStackTrace();
					}
	            }
	            else
	            {
	           		if(window.getTextArquivo().getText().equals(""))
	        		{
	            		JOptionPane.showMessageDialog (null, "Arquivo vazio", "Arquivo", JOptionPane.WARNING_MESSAGE);
	        		}
	        		else
	        		{
	          			int resp = JOptionPane.showConfirmDialog(null, "Salvar altera\u00e7\u00f5es?");
	
		          		if(resp == 0)
		          		{
				            //Salvar um novo arquivo se ele n existir
				            if(window.getFile() == null)
			            	{
			                	window.salvarComo();
		                        try
		                        {
									RunAskella();
								}
								catch (ParseException e1)
								{
									e1.printStackTrace();
								}
			
			            		}
		            		else //Se o arquivo ja existir salvar nele
		            		{
			                	window.salvar();
	                            try
	                            {
									RunAskella();
								}
								catch (ParseException e1)
								{
									e1.printStackTrace();
								}
								
	            			}
	          			}
	        		}
	            }
	    	}
		});
  	}

  	public static void RunAskella() throws ParseException
    {
    	FileReader arql = null;
      
        try
        {
			arql = new FileReader(window.getFile());
		}
		catch (FileNotFoundException e2)
		{
			e2.printStackTrace();
		}
			BufferedReader arq = new BufferedReader(arql);
	    try
	    {
	      	FreshMeat parser = new FreshMeat(arq);
	      	JOptionPane.showMessageDialog(window, "Compilado com sucesso!");
	    }
	    catch (Exception e1)
	    {
	      	FreshMeat.ReInit(arq);
	    }
	    catch (Error e1)
   		{
   		  	FreshMeat.ReInit(arq);
   		}

        try
        {
            SimpleNode simpleNode = FreshMeat.start();
            simpleNode.dump("", window);
            //;

      	}
        catch (ParseException e)
        {
            lnlog("Exception: A express\u00e3o inserida n\u00e3o est\u00e1 correta, verifique por favor com as instru\u00e7\u00f5es abaixo e tente novamente.");
            lnlog(e.getMessage());
            //lnlog(e);
            //parser.contParseError = 1;   // n\u00e3o existe recupera\u00e7\u00e3o de erros
            //System.exit(0);			  	
        }
        catch (Error e)
        {
            lnlog("Error: A entrada inserida n\u00e3o \u00e9 um token v\u00e1lido ou o arquivo est\u00e1 vazio, revise por favor e tente novamente");
       		//System.out.println("error");
            lnlog(e.getMessage());
        }
//     	finally
//    	{
//      	lnlog(token_source.foundLexError() + " Lexical Errors found");
//        	lnlog(contParseError + " Syntactic Errors found");
//     	}  
        }
		
	static private void log(String s)
	{
		console = s;
		window.setConsole(console);
  	}

  	static private void lnlog(String s)
  	{
  		log(s + "\n");
  	}
	
    static public String im(int x)
    {
		int k;
		String s;
		s = tokenImage[x];
		k = s.lastIndexOf("\"");
		try
		{
	      s = s.substring(1,k);
		}
        catch (StringIndexOutOfBoundsException e)
        {
        }
        return s;
  	}

  	static Token lastError = null;
  	static boolean eof;    // vari\u00e1vel que indica se EOF foi alcan\u00e7ado

  	// o m\u00e9todo abaixo consome tokens at\u00e9 alcan\u00e7ar um que perten\u00e7a ao conjunto
  	// de sincroniza\u00e7\u00e3o
  	static void consumeUntil(RecoverySet g,
	                         ParseException e,
	                         String met) throws ParseEOFException,
	                                            ParseException
 	{
		Token tok;
        //lnlog();

        lnlog("*** " + met + " ***");
        lnlog("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

        if (g == null) throw e; // se o conjunto \u00e9 null, propaga a exce\u00e7\u00e3o

        tok = getToken(1); // pega token corrente

        while ( ! eof )
        { // se n\u00e3o chegou ao fim do arquivo
	      	if ( g.contains(tok.kind))
	      	{	//achou um token no conjunto
	            lnlog("     Encontrado token de sincroniza\u00e7\u00e3o: " +
	                               im(tok.kind));
	        break;
	      	}
	      	lnlog("     Ignorando o token: " + im(tok.kind));
	      	getNextToken();     // pega pr\u00f3ximo token       
	      	tok = getToken(1);
	      	if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	              eof = true;
        }
    	if ( tok != lastError)
    	{
          	lnlog(e.getMessage());
          	lastError = tok;
        }
        	if ( eof )
          		throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }
  
}

PARSER_END(FreshMeat)

TOKEN_MGR_DECLS :
{
	int countLexError = 0;
	
	public int foundLexError()
	{
	   return countLexError;
	}
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* Reserved words */
{
  	< STARTSCRIPT : "Start" >
| 	< INTEGERTYPE : "int" >
| 	< STRINGTYPE : "string" >
| 	< BOOLTYPE : "bool" >
| 	< USING : "using" >
| 	< IF : "if">
| 	< THEN : "then">
| 	< ELSE : "else">
| 	< FOR : "for">
| 	< TO : "to">
| 	< WHILE : "while" >

}

TOKEN : /* Operadores */
{
	< SUM: "+" >
|	< MINUS: "-" >
|	< PLUS: "*" >
|	< DIVIDE: "/" >	
|	< ASSIGN: "="> 
|	< GREATER: ">" >
|	< LESS: "<" >
|	< GREATEREQUAL: ">=" >
|	< LESSEQUAL: "<=" >
|	< DIFFERENCE: "!=" >
|	< EQUAL: "==" >	

}

TOKEN: /* Simbolos especiais */
{
	< LBRACE : "{" >
| 	< RBRACE : "}" >
| 	< VARCHARDELIMITER : "'" >
| 	< SEMICOLON : ";" >
| 	< COMMA : "," >
| 	< DOUBLEPOINTS : ":" >
| 	< LPARENT : "(" >
| 	< RPARENT : ")" >
| 	< HASHTAG : "#" >

}

TOKEN :
{
 	< ID  : < LETTER > (< LETTER > | < DIGIT >)* >
| 	< LETTER : ["A"-"Z" ] | ["a"-"z"] >
|   < NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
| 	< #DIGIT : [ "0"-"9" ] >

}

SKIP:
{
	"/*": multilinecomment
}

< multilinecomment > SKIP:
{
  	"*/": DEFAULT
| 	< ~ [] >
}

SKIP:
{
	"//": singlelinecomment
}

< singlelinecomment > SKIP:
{ 
  	< ["\n", "\r"] >: DEFAULT
| 	< ~ [] >
}

SimpleNode start() :{/*@bgen(jjtree) start */
                      SimpleNode jjtn000 = new SimpleNode(JJTSTART);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.start; }
{/*@bgen(jjtree) start */
        try {
/*@egen*/
	try
  	{
		(UsingDeclaration())*
		  
		StartScript() DoublePoints() Id()
		LBrace()
		
			(Block())+
		
		RBrace()
  		<EOF>
		
		{ return jjtn000; }
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "start");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}
   
void Block(): {/*@bgen(jjtree) Block */
                SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.Block; }
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
  	try
  	{
  		(VariableDeclaration())*
  	
  		Command() 
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "Block");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Command(): {/*@bgen(jjtree) Command */
                  SimpleNode jjtn000 = new SimpleNode(JJTCOMMAND);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.Command; }
{/*@bgen(jjtree) Command */
        try {
/*@egen*/
	try
  	{
			VariableAssignment()
				
		| 	If()
		 
		| 	ForTo()
		
		| 	While()
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "Command");  
  		}
  		catch(ParseEOFException eof)
  		{
     
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariableAssignment(): {/*@bgen(jjtree) VariableAssignment */
                             SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEASSIGNMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.VariableAssignment; }
{/*@bgen(jjtree) VariableAssignment */
        try {
/*@egen*/
	try
  	{
		Id() VariableInit() SemiColon()
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "VariableInit");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariableInit(): {/*@bgen(jjtree) VariableInit */
                       SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEINIT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.VariableInit; }
{/*@bgen(jjtree) VariableInit */
        try {
/*@egen*/
	try
  	{
  		Assign() Y()
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "VariableInit");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Y(): {/*@bgen(jjtree) Y */
            SimpleNode jjtn000 = new SimpleNode(JJTY);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.Y; }
{/*@bgen(jjtree) Y */
        try {
/*@egen*/
	try
  	{
  		( (Number() | Id()) (DoMath())* ) | W()
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "Y");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void W(): {/*@bgen(jjtree) W */
            SimpleNode jjtn000 = new SimpleNode(JJTW);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.W; }
{/*@bgen(jjtree) W */
        try {
/*@egen*/
	try
  	{
  	 	(StringDelimit() Id() StringDelimit())
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "W");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void DoMath(): {/*@bgen(jjtree) DoMath */
                 SimpleNode jjtn000 = new SimpleNode(JJTDOMATH);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.DoMath; }
{/*@bgen(jjtree) DoMath */
        try {
/*@egen*/
 	try
  	{
	 	(MathOperator() ExpressionArguments())
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "DoMath");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void If(): {/*@bgen(jjtree) If */
             SimpleNode jjtn000 = new SimpleNode(JJTIF);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.If; }
{/*@bgen(jjtree) If */
        try {
/*@egen*/
	try
  	{
		IF() LogicExpression() Then()
				(LBrace()	Command()	RBrace() )
				(Else()		LBrace()		Command()	RBrace() )?
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "If");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/			
}

void ForTo(): {/*@bgen(jjtree) ForTo */
                SimpleNode jjtn000 = new SimpleNode(JJTFORTO);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.ForTo; }
{/*@bgen(jjtree) ForTo */
        try {
/*@egen*/
	try
  	{
		FOR() VariableAssignment() To() ExpressionArguments()
	 	(LBrace()
	 		Command()
	 	RBrace() )
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "ForTo");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void While(): {/*@bgen(jjtree) While */
                SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.While; }
{/*@bgen(jjtree) While */
        try {
/*@egen*/ 
	try
  	{
		WHILE() LogicExpression()
	 	(LBrace()
	 		Command()
	 	RBrace() )
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "While");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
} 

void LogicExpression(): {/*@bgen(jjtree) LogicExpression */
                          SimpleNode jjtn000 = new SimpleNode(JJTLOGICEXPRESSION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.LogicExpression; }
{/*@bgen(jjtree) LogicExpression */
        try {
/*@egen*/
	try
  	{
  		ExpressionArguments() (LogicOperator() ExpressionArguments())+
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "LogicExpression");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExpressionArguments(): {/*@bgen(jjtree) ExpressionArguments */
                              SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONARGUMENTS);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.ExpressionArguments; }
{/*@bgen(jjtree) ExpressionArguments */
        try {
/*@egen*/
	try
  	{
  		Id() | Number()
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "ExpressionArguments");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MathOperator(): {/*@bgen(jjtree) MathOperator */
                       SimpleNode jjtn000 = new SimpleNode(JJTMATHOPERATOR);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.MathOperator; }
{/*@bgen(jjtree) MathOperator */
        try {
/*@egen*/
	try
  	{
		 	Sum()
		|	Minus()
		|	Plus()
		|	Divide()
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "MathOperator");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LogicOperator(): {/*@bgen(jjtree) LogicOperator */
                        SimpleNode jjtn000 = new SimpleNode(JJTLOGICOPERATOR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.LogicOperator; }
{/*@bgen(jjtree) LogicOperator */
        try {
/*@egen*/
	try
  	{
	  		Greater()
		|	Less()
		|	GreaterEqual()
		|	LessEqual()
		|	Difference()
		|	Equal()
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "LogicOperator");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void UsingDeclaration(): {/*@bgen(jjtree) UsingDeclaration */
                           SimpleNode jjtn000 = new SimpleNode(JJTUSINGDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.UsingDeclaration; }
{/*@bgen(jjtree) UsingDeclaration */
        try {
/*@egen*/
	try
  	{
  		(Using() Id() SemiColon())
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "UsingDeclaration");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariableDeclaration(): {/*@bgen(jjtree) VariableDeclaration */
                              SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.VariableDeclaration; }
{/*@bgen(jjtree) VariableDeclaration */
        try {
/*@egen*/
  	try
  	{
  		(DataType() (IDList())+ SemiColon())
	}
	catch(ParseException e)
	{
  		try
  		{		
			consumeUntil(recoverySet, e, "VariableDeclaration");  
  		}
  		catch(ParseEOFException eof)
  		{
    
  		}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DataType(): {/*@bgen(jjtree) DataType */
                   SimpleNode jjtn000 = new SimpleNode(JJTDATATYPE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.DataType;}
{/*@bgen(jjtree) DataType */
        try {
/*@egen*/
  	try
  	{
  		IntegerType() | StringType() | BoolType()
	}
	catch(ParseException e)
	{
	  	try
	  	{
	    	consumeUntil(recoverySet, e, "DataType");  
	  	}
	  	catch(ParseEOFException eof)
	  	{

	  	}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
  
void IDList(): {/*@bgen(jjtree) IDList */
                 SimpleNode jjtn000 = new SimpleNode(JJTIDLIST);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/ RecoverySet recoverySet = First.IDList; }
{/*@bgen(jjtree) IDList */
        try {
/*@egen*/
	try
  	{
		Id() (VariableInit())? | Comma() Id() (VariableInit())?
	}
	catch(ParseException e)
	{
	  	try
	  	{
	    	consumeUntil(recoverySet, e, "IDList");  
	  	}
	  	catch(ParseEOFException eof)
	  	{

	  	}  
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void StartScript(): {/*@bgen(jjtree) StartScript */
  SimpleNode jjtn000 = new SimpleNode(JJTSTARTSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) StartScript */
        try {
/*@egen*/
  	<STARTSCRIPT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DoublePoints(): {/*@bgen(jjtree) DoublePoints */
  SimpleNode jjtn000 = new SimpleNode(JJTDOUBLEPOINTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) DoublePoints */
        try {
/*@egen*/
  	<DOUBLEPOINTS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Id(): {/*@bgen(jjtree) Id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Id */
        try {
/*@egen*/
  	<ID>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LBrace(): {/*@bgen(jjtree) LBrace */
  SimpleNode jjtn000 = new SimpleNode(JJTLBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) LBrace */
        try {
/*@egen*/
  	<LBRACE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RBrace(): {/*@bgen(jjtree) RBrace */
  SimpleNode jjtn000 = new SimpleNode(JJTRBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) RBrace */
        try {
/*@egen*/
  	<RBRACE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SemiColon(): {/*@bgen(jjtree) SemiColon */
  SimpleNode jjtn000 = new SimpleNode(JJTSEMICOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) SemiColon */
        try {
/*@egen*/
  	<SEMICOLON>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Assign(): {/*@bgen(jjtree) Assign */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Assign */
        try {
/*@egen*/
  	<ASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Number(): {/*@bgen(jjtree) Number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Number */
        try {
/*@egen*/
  	<NUMBER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void StringDelimit(): {/*@bgen(jjtree) StringDelimit */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRINGDELIMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) StringDelimit */
        try {
/*@egen*/
  	<VARCHARDELIMITER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IF(): {/*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) IF */
        try {
/*@egen*/
  	< IF >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Then(): {/*@bgen(jjtree) Then */
  SimpleNode jjtn000 = new SimpleNode(JJTTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Then */
        try {
/*@egen*/
  	<THEN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Else(): {/*@bgen(jjtree) Else */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Else */
        try {
/*@egen*/
  	<ELSE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FOR(): {/*@bgen(jjtree) FOR */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) FOR */
        try {
/*@egen*/
  	<FOR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void To(): {/*@bgen(jjtree) To */
  SimpleNode jjtn000 = new SimpleNode(JJTTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) To */
        try {
/*@egen*/
  	<TO>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WHILE(): {/*@bgen(jjtree) WHILE */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) WHILE */
        try {
/*@egen*/
  	<WHILE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Sum(): {/*@bgen(jjtree) Sum */
  SimpleNode jjtn000 = new SimpleNode(JJTSUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Sum */
        try {
/*@egen*/
  	<SUM>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Minus(): {/*@bgen(jjtree) Minus */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Minus */
        try {
/*@egen*/
  	<MINUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Plus(): {/*@bgen(jjtree) Plus */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Plus */
        try {
/*@egen*/
  	<PLUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Divide(): {/*@bgen(jjtree) Divide */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Divide */
        try {
/*@egen*/
  	<DIVIDE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Greater(): {/*@bgen(jjtree) Greater */
  SimpleNode jjtn000 = new SimpleNode(JJTGREATER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Greater */
        try {
/*@egen*/
  	<GREATER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Less(): {/*@bgen(jjtree) Less */
  SimpleNode jjtn000 = new SimpleNode(JJTLESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Less */
        try {
/*@egen*/
  	<LESS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void GreaterEqual(): {/*@bgen(jjtree) GreaterEqual */
  SimpleNode jjtn000 = new SimpleNode(JJTGREATEREQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) GreaterEqual */
        try {
/*@egen*/
  	<GREATEREQUAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LessEqual(): {/*@bgen(jjtree) LessEqual */
  SimpleNode jjtn000 = new SimpleNode(JJTLESSEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) LessEqual */
        try {
/*@egen*/
  	<LESSEQUAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Difference(): {/*@bgen(jjtree) Difference */
  SimpleNode jjtn000 = new SimpleNode(JJTDIFFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Difference */
        try {
/*@egen*/
  	<DIFFERENCE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Equal(): {/*@bgen(jjtree) Equal */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Equal */
        try {
/*@egen*/
  	<EQUAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Using(): {/*@bgen(jjtree) Using */
  SimpleNode jjtn000 = new SimpleNode(JJTUSING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Using */
        try {
/*@egen*/
	<USING>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IntegerType(): {/*@bgen(jjtree) IntegerType */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) IntegerType */
        try {
/*@egen*/
	<INTEGERTYPE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void StringType(): {/*@bgen(jjtree) StringType */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) StringType */
        try {
/*@egen*/
	<STRINGTYPE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BoolType(): {/*@bgen(jjtree) BoolType */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) BoolType */
        try {
/*@egen*/
	<BOOLTYPE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Comma(): {/*@bgen(jjtree) Comma */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Comma */
        try {
/*@egen*/
	<COMMA>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


















	  		








