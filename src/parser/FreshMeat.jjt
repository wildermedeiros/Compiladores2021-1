/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(FreshMeat)

package parser;
import recovery.*;

public class FreshMeat
{
  public static void main(String args []) throws ParseException
  {
    FreshMeat parser = new FreshMeat(System.in);
    while (true)
    {
      System.out.println("Lendo através da entrada padrão...");
      System.out.print("Digite uma expressão:");

      SimpleNode simpleNode = FreshMeat.start();
      simpleNode.dump("");
      try
      {
        /*switch (FreshMeat.start())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Tchau.");
          break;
          default : 
          break;
        }*/
      }
      catch (Exception e)
      {
        System.out.println("Exception: A expressão inserida não está correta, verifique por favor com as instruções abaixo e tente novamente.");
        System.out.println(e.getMessage());
        FreshMeat.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Error: A entrada inserida não é um token válido, revise por favor e tente novamente");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static public String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }
	 
  static Token lastError = null;
  static boolean eof;    // variável que indica se EOF foi alcançado
	
  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil(RecoverySet g,
	                 ParseException e,
	                 String met) throws ParseEOFException,
	                                    ParseException
  {
	Token tok;
	System.out.println();
	System.out.println("*** " + met + " ***");
	System.out.println("     Conjunto de sincronização: " + g);
		
	if (g == null) throw e; // se o conjunto é null, propaga a exceção
	
	tok = getToken(1); // pega token corrente
	while ( ! eof )	{ // se não chegou ao fim do arquivo
	  if ( g.contains(tok.kind)) {//achou um token no conjunto
	    System.out.println("     Encontrado token de sincronização: " + 
	                       im(tok.kind));
	    break;
	  }
	  System.out.println("     Ignorando o token: " + im(tok.kind));
	  getNextToken();     // pega próximo token       
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	      eof = true;
	}
    if ( tok != lastError)  {
	  System.out.println(e.getMessage());
	  lastError = tok;
	   
	}
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde não deveria.");
  }
  
}

PARSER_END(FreshMeat)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* Reserved words */
{
  	< STARTSCRIPT : "Start" >
| 	< INTEGERTYPE : "int" >
| 	< STRINGTYPE : "string" >
| 	< BOOLTYPE : "bool" >
| 	< USING : "using" >
| 	< IF : "if">
| 	< THEN : "then">
| 	< ELSE : "else">
| 	< FOR : "for">
| 	< TO : "to">
| 	< WHILE : "while" >

}

TOKEN : /* Operadores */
{
	< SUM: "+" >
|	< MINUS: "-" >
|	< PLUS: "*" >
|	< DIVIDE: "/" >	
|	< ASSIGN: "="> 
|	< GREATER: ">" >
|	< LESS: "<" >
|	< GREATEREQUAL: ">=" >
|	< LESSEQUAL: "<=" >
|	< DIFFERENCE: "!=" >
|	< EQUAL: "==" >	

}

TOKEN: /* Simbolos especiais */
{
	< LBRACE : "{" >
| 	< RBRACE : "}" >
| 	< VARCHARDELIMITER : "'" >
| 	< SEMICOLON : ";" >
| 	< COMMA : "," >
| 	< DOUBLEPOINTS : ":" >
| 	< LPARENT : "(" >
| 	< RPARENT : ")" >
| 	< HASHTAG : "#" >

}

TOKEN :
{
 	< ID  : < LETTER > (< LETTER > | < DIGIT >)* >
| 	< LETTER : ["A"-"Z" ] | ["a"-"z"] >
|   < NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
| 	< #DIGIT : [ "0"-"9" ] >

}

SKIP:
{
	"/*": multilinecomment
}

< multilinecomment > SKIP:
{
  	"*/": DEFAULT
| 	< ~ [] >
}

SKIP:
{
	"//": singlelinecomment
}

< singlelinecomment > SKIP:
{ 
  	< ["\n", "\r"] >: DEFAULT
| 	< ~ [] >
}

SimpleNode start() :{}
{
	(UsingDeclaration())*
	  
	<STARTSCRIPT> <DOUBLEPOINTS> <ID> 
	<LBRACE>
	
		(Block())+
	
	<RBRACE>
	
{ return jjtThis; }
}
  
void Block(): {}
{
  	(VariableDeclaration())*

  	Command()
}

void Command(): {}
{
	VariableAssignment()

	//Variable() < ASSIGN > MathExpression() < SEMICOLON >

| 	If()
 
| 	ForTo()

| 	While()
 	
}

void VariableAssignment(): {}
{
	<ID> VariableInicialization() <SEMICOLON>
}

// | MathAssign()

void VariableInicialization(): { }
{
  	<ASSIGN> (<NUMBER> | <VARCHARDELIMITER> <ID> <VARCHARDELIMITER>)
}

void MathAssign(): { }
{
  	<ASSIGN> MathExpression()
}

void If(): { }
{
	<IF> LogicExpression() <THEN>
			(<LBRACE>	Command()	<RBRACE> )
			(<ELSE>		<LBRACE>		Command()	<RBRACE> )? 
}

void ForTo(): { }
{
	<FOR> VariableAssignment() <TO> ExpressionArguments()
 	(<LBRACE>
 		Command()
 	<RBRACE> )
}

void While(): { }
{
	<WHILE> LogicExpression()
 	(<LBRACE>
 		Command()
 	<RBRACE> )
} 

void LogicExpression(): {}
{
  	ExpressionArguments() (LogicOperator() ExpressionArguments())+
}

void MathExpression() : {}
{
	ExpressionArguments() (MathOperator() ExpressionArguments())+ 
}

void ExpressionArguments(): {}
{
  	< ID > | < NUMBER >
}

void MathOperator(): { }
{
		< SUM >
	|	< MINUS >
	|	< PLUS >
	|	< DIVIDE >	
}

void LogicOperator(): { }
{
  		< GREATER >
	|	< LESS>
	|	< GREATEREQUAL>
	|	< LESSEQUAL>
	|	< DIFFERENCE>
	|	< EQUAL>
}

void UsingDeclaration(): {}
{
  (<USING> <ID> <SEMICOLON>)
}

void VariableDeclaration(): {}
{
  (DataType() (IDList())+ <SEMICOLON>)
}

void DataType(): { RecoverySet recoverySet = First.DataType;}
{
  	try
  	{
  		< INTEGERTYPE > | < STRINGTYPE > | < BOOLTYPE >
	}
	catch(ParseException e)
	{
		consumeUntil(recoverySet, e, "DataType");  
	}
}
 
void IDList(): { }
{
	 <ID> (VariableInicialization())? | <COMMA> <ID> (VariableInicialization())? 
}
 
//void Semicolon(): { }
//{
//  	<SEMICOLON>
//}


